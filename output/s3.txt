
C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform init
Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing provider plugins...
- Finding latest version of hashicorp/aws...
- Installing hashicorp/aws v5.94.1...
- Installed hashicorp/aws v5.94.1 (signed by HashiCorp)
Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.


C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform plan
var.aws_profile
  cmrs-aws

  Enter a value: cmrs-aws

var.aws_region
  ap-southeast-1

  Enter a value: ap-southeast-1


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.deployment_bucket will be created
  + resource "aws_s3_bucket" "deployment_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "cmrs-frontend-hosting"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Created_By" = "cmrs-iac"
          + "Name"       = "cmrs-frontend-hosting"
        }
      + tags_all                    = {
          + "Created_By" = "cmrs-iac"
          + "Name"       = "cmrs-frontend-hosting"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_acl.s3_bucket_acl will be created
  + resource "aws_s3_bucket_acl" "s3_bucket_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # aws_s3_bucket_ownership_controls.ownership_controls will be created
  + resource "aws_s3_bucket_ownership_controls" "ownership_controls" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + object_ownership = "BucketOwnerPreferred"
        }
    }

  # aws_s3_bucket_website_configuration.website will be created
  + resource "aws_s3_bucket_website_configuration" "website" {
      + bucket           = (known after apply)
      + id               = (known after apply)
      + routing_rules    = (known after apply)
      + website_domain   = (known after apply)
      + website_endpoint = (known after apply)

      + error_document {
          + key = "index.html"
        }

      + index_document {
          + suffix = "index.html"
        }

      + routing_rule (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform
apply" now.

C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform apply
var.aws_profile
  cmrs-aws

  Enter a value: cmrs-aws

var.aws_region
  ap-southeast-1

  Enter a value: ap-southeast-1


Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following
symbols:
  + create

Terraform will perform the following actions:

  # aws_s3_bucket.deployment_bucket will be created
  + resource "aws_s3_bucket" "deployment_bucket" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      + arn                         = (known after apply)
      + bucket                      = "cmrs-frontend-hosting"
      + bucket_domain_name          = (known after apply)
      + bucket_prefix               = (known after apply)
      + bucket_regional_domain_name = (known after apply)
      + force_destroy               = false
      + hosted_zone_id              = (known after apply)
      + id                          = (known after apply)
      + object_lock_enabled         = (known after apply)
      + policy                      = (known after apply)
      + region                      = (known after apply)
      + request_payer               = (known after apply)
      + tags                        = {
          + "Created_By" = "cmrs-iac"
          + "Name"       = "cmrs-frontend-hosting"
        }
      + tags_all                    = {
          + "Created_By" = "cmrs-iac"
          + "Name"       = "cmrs-frontend-hosting"
        }
      + website_domain              = (known after apply)
      + website_endpoint            = (known after apply)

      + cors_rule (known after apply)

      + grant (known after apply)

      + lifecycle_rule (known after apply)

      + logging (known after apply)

      + object_lock_configuration (known after apply)

      + replication_configuration (known after apply)

      + server_side_encryption_configuration (known after apply)

      + versioning (known after apply)

      + website (known after apply)
    }

  # aws_s3_bucket_acl.s3_bucket_acl will be created
  + resource "aws_s3_bucket_acl" "s3_bucket_acl" {
      + acl    = "private"
      + bucket = (known after apply)
      + id     = (known after apply)

      + access_control_policy (known after apply)
    }

  # aws_s3_bucket_ownership_controls.ownership_controls will be created
  + resource "aws_s3_bucket_ownership_controls" "ownership_controls" {
      + bucket = (known after apply)
      + id     = (known after apply)

      + rule {
          + object_ownership = "BucketOwnerPreferred"
        }
    }

  # aws_s3_bucket_website_configuration.website will be created
  + resource "aws_s3_bucket_website_configuration" "website" {
      + bucket           = (known after apply)
      + id               = (known after apply)
      + routing_rules    = (known after apply)
      + website_domain   = (known after apply)
      + website_endpoint = (known after apply)

      + error_document {
          + key = "index.html"
        }

      + index_document {
          + suffix = "index.html"
        }

      + routing_rule (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_s3_bucket.deployment_bucket: Creating...
aws_s3_bucket.deployment_bucket: Creation complete after 3s [id=cmrs-frontend-hosting]
aws_s3_bucket_ownership_controls.ownership_controls: Creating...
aws_s3_bucket_website_configuration.website: Creating...
aws_s3_bucket_website_configuration.website: Creation complete after 1s [id=cmrs-frontend-hosting]
aws_s3_bucket_ownership_controls.ownership_controls: Creation complete after 1s [id=cmrs-frontend-hosting]
aws_s3_bucket_acl.s3_bucket_acl: Creating...
aws_s3_bucket_acl.s3_bucket_acl: Creation complete after 1s [id=cmrs-frontend-hosting,private]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.


---------------------------
Cloud front and additional s3 bucket policy for u-frontend IAM user


C:\Users\d1326134\NUS\gradCert\cmrs-iac\rds>cd ../s3

C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform init
Initializing the backend...
Initializing provider plugins...
- Reusing previous version of hashicorp/aws from the dependency lock file
- Using previously-installed hashicorp/aws v5.94.1

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform plan
var.aws_profile
  cmrs-aws

  Enter a value: cmrs-aws

var.aws_region
  ap-southeast-1

  Enter a value: ap-southeast-1

aws_s3_bucket.deployment_bucket: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_ownership_controls.ownership_controls: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_website_configuration.website: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_acl.s3_bucket_acl: Refreshing state... [id=cmrs-frontend-hosting,private]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_cloudfront_distribution.website_cdn will be created
  + resource "aws_cloudfront_distribution" "website_cdn" {
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + continuous_deployment_policy_id = (known after apply)
      + default_root_object             = "index.html"
      + domain_name                     = (known after apply)
      + enabled                         = true
      + etag                            = (known after apply)
      + hosted_zone_id                  = (known after apply)
      + http_version                    = "http2"
      + id                              = (known after apply)
      + in_progress_validation_batches  = (known after apply)
      + is_ipv6_enabled                 = false
      + last_modified_time              = (known after apply)
      + price_class                     = "PriceClass_All"
      + retain_on_delete                = false
      + staging                         = false
      + status                          = (known after apply)
      + tags                            = {
          + "Created_By" = "cmrs-iac"
        }
      + tags_all                        = {
          + "Created_By" = "cmrs-iac"
        }
      + trusted_key_groups              = (known after apply)
      + trusted_signers                 = (known after apply)
      + wait_for_deployment             = true

      + custom_error_response {
          + error_caching_min_ttl = 300
          + error_code            = 404
          + response_code         = 200
          + response_page_path    = "/404.html"
        }

      + default_cache_behavior {
          + allowed_methods        = [
              + "DELETE",
              + "GET",
              + "HEAD",
              + "OPTIONS",
              + "PATCH",
              + "POST",
              + "PUT",
            ]
          + cached_methods         = [
              + "GET",
              + "HEAD",
            ]
          + compress               = true
          + default_ttl            = 300
          + max_ttl                = 1200
          + min_ttl                = 0
          + target_origin_id       = "origin-bucket-cmrs-frontend-hosting"
          + trusted_key_groups     = (known after apply)
          + trusted_signers        = (known after apply)
          + viewer_protocol_policy = "redirect-to-https"

          + forwarded_values {
              + headers                 = (known after apply)
              + query_string            = false
              + query_string_cache_keys = (known after apply)

              + cookies {
                  + forward           = "none"
                  + whitelisted_names = (known after apply)
                }
            }

          + grpc_config (known after apply)
        }

      + origin {
          + connection_attempts      = 3
          + connection_timeout       = 10
          + domain_name              = "cmrs-frontend-hosting.s3.ap-southeast-1.amazonaws.com"
          + origin_access_control_id = (known after apply)
          + origin_id                = "origin-bucket-cmrs-frontend-hosting"
            # (1 unchanged attribute hidden)
        }

      + restrictions {
          + geo_restriction {
              + locations        = (known after apply)
              + restriction_type = "none"
            }
        }

      + viewer_certificate {
          + cloudfront_default_certificate = true
          + minimum_protocol_version       = "TLSv1"
        }
    }

  # aws_cloudfront_origin_access_control.cloudfront_oac will be created
  + resource "aws_cloudfront_origin_access_control" "cloudfront_oac" {
      + arn                               = (known after apply)
      + description                       = "The origin access control configuration for the Cloudfront distribution"
      + etag                              = (known after apply)
      + id                                = (known after apply)
      + name                              = "CMRS_Cloudfront-OAC"
      + origin_access_control_origin_type = "s3"
      + signing_behavior                  = "always"
      + signing_protocol                  = "sigv4"
    }

  # aws_s3_bucket_policy.bucket_policy will be created
  + resource "aws_s3_bucket_policy" "bucket_policy" {
      + bucket = "cmrs-frontend-hosting"
      + id     = (known after apply)
      + policy = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if
you run "terraform apply" now.

C:\Users\d1326134\NUS\gradCert\cmrs-iac\s3>terraform apply -var-file="dev.tfvars"
aws_s3_bucket.deployment_bucket: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_ownership_controls.ownership_controls: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_website_configuration.website: Refreshing state... [id=cmrs-frontend-hosting]
aws_s3_bucket_acl.s3_bucket_acl: Refreshing state... [id=cmrs-frontend-hosting,private]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the
following symbols:
  + create

Terraform will perform the following actions:

  # aws_cloudfront_distribution.website_cdn will be created
  + resource "aws_cloudfront_distribution" "website_cdn" {
      + arn                             = (known after apply)
      + caller_reference                = (known after apply)
      + continuous_deployment_policy_id = (known after apply)
      + default_root_object             = "index.html"
      + domain_name                     = (known after apply)
      + enabled                         = true
      + etag                            = (known after apply)
      + hosted_zone_id                  = (known after apply)
      + http_version                    = "http2"
      + id                              = (known after apply)
      + in_progress_validation_batches  = (known after apply)
      + is_ipv6_enabled                 = false
      + last_modified_time              = (known after apply)
      + price_class                     = "PriceClass_All"
      + retain_on_delete                = false
      + staging                         = false
      + status                          = (known after apply)
      + tags                            = {
          + "Created_By" = "cmrs-iac"
        }
      + tags_all                        = {
          + "Created_By" = "cmrs-iac"
        }
      + trusted_key_groups              = (known after apply)
      + trusted_signers                 = (known after apply)
      + wait_for_deployment             = true

      + custom_error_response {
          + error_caching_min_ttl = 300
          + error_code            = 404
          + response_code         = 200
          + response_page_path    = "/404.html"
        }

      + default_cache_behavior {
          + allowed_methods        = [
              + "DELETE",
              + "GET",
              + "HEAD",
              + "OPTIONS",
              + "PATCH",
              + "POST",
              + "PUT",
            ]
          + cached_methods         = [
              + "GET",
              + "HEAD",
            ]
          + compress               = true
          + default_ttl            = 300
          + max_ttl                = 1200
          + min_ttl                = 0
          + target_origin_id       = "origin-bucket-cmrs-frontend-hosting"
          + trusted_key_groups     = (known after apply)
          + trusted_signers        = (known after apply)
          + viewer_protocol_policy = "redirect-to-https"

          + forwarded_values {
              + headers                 = (known after apply)
              + query_string            = false
              + query_string_cache_keys = (known after apply)

              + cookies {
                  + forward           = "none"
                  + whitelisted_names = (known after apply)
                }
            }

          + grpc_config (known after apply)
        }

      + origin {
          + connection_attempts      = 3
          + connection_timeout       = 10
          + domain_name              = "cmrs-frontend-hosting.s3.ap-southeast-1.amazonaws.com"
          + origin_access_control_id = (known after apply)
          + origin_id                = "origin-bucket-cmrs-frontend-hosting"
            # (1 unchanged attribute hidden)
        }

      + restrictions {
          + geo_restriction {
              + locations        = (known after apply)
              + restriction_type = "none"
            }
        }

      + viewer_certificate {
          + cloudfront_default_certificate = true
          + minimum_protocol_version       = "TLSv1"
        }
    }

  # aws_cloudfront_origin_access_control.cloudfront_oac will be created
  + resource "aws_cloudfront_origin_access_control" "cloudfront_oac" {
      + arn                               = (known after apply)
      + description                       = "The origin access control configuration for the Cloudfront distribution"
      + etag                              = (known after apply)
      + id                                = (known after apply)
      + name                              = "CMRS_Cloudfront-OAC"
      + origin_access_control_origin_type = "s3"
      + signing_behavior                  = "always"
      + signing_protocol                  = "sigv4"
    }

  # aws_s3_bucket_policy.bucket_policy will be created
  + resource "aws_s3_bucket_policy" "bucket_policy" {
      + bucket = "cmrs-frontend-hosting"
      + id     = (known after apply)
      + policy = (known after apply)
    }

Plan: 3 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_cloudfront_origin_access_control.cloudfront_oac: Creating...
aws_cloudfront_origin_access_control.cloudfront_oac: Creation complete after 2s [id=E2FNHRZHJ32JQN]
aws_cloudfront_distribution.website_cdn: Creating...
aws_cloudfront_distribution.website_cdn: Still creating... [10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [40s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [50s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m0s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m40s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [1m50s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m0s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m40s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [2m50s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m0s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m40s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [3m50s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m0s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m40s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [4m50s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [5m0s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [5m10s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [5m20s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [5m30s elapsed]
aws_cloudfront_distribution.website_cdn: Still creating... [5m40s elapsed]
aws_cloudfront_distribution.website_cdn: Creation complete after 5m45s [id=E3MTLZ7D64SYQB]
aws_s3_bucket_policy.bucket_policy: Creating...
aws_s3_bucket_policy.bucket_policy: Creation complete after 1s [id=cmrs-frontend-hosting]

Apply complete! Resources: 3 added, 0 changed, 0 destroyed.